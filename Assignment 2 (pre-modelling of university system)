#include<iostream>
#include <vector>
#include <string>

using namespace std;

class Person {
    string name;
    string ID;
    int contact_information;
    int age;

public:
    Person(const string& name, const string& ID, int contact_information, int age)
        : name(name), ID(ID), contact_information(contact_information), age(age) {}

    ~Person() {}

    // Getters
    string getName() const { 
         return name;
    }
    string getID() const {
         return ID;
    }
    int getContactInfo() const {
         return contact_information;
    }
    int getAge() const { 
        return age;
    }

    // Setters with validation
    bool setName(const string& newName){
        if (newName.empty()){
            return false;
        }
        name=newName;
        return true;
        
    }

    bool setAge(int newAge) {
        if (newAge<=0 || newAge>150) {
                return false;
        }
        age=newAge;
        return true;
    }
};

class Student {
    string enrollment_date;
    string program;
    double CGPA;

public:
    Student(const string& enrollment_date, const string& program, double CGPA)
        : enrollment_date(enrollment_date), program(program), CGPA(CGPA) {}

    ~Student() {}

    // Getters
    string getEnrollmentDate() const { 
        return enrollment_date;
    }
    string getProgram() const {
        return program;
    }
    double getCGPA() const {
        return CGPA;
    }

    // Setters with Validation
    bool setProgram(const string& newProgram) {
        if (newProgram.empty()) {
                return false;
        }
        program=newProgram;
        return true;
    }

    bool setCGPA(double newCGPA) {
        if (newCGPA < 0.0 || newCGPA > 4.0){
                return false;
        }
        CGPA=newCGPA;
        return true;
    }
};

class Professor {
    string department;
    string specialization;
    string hire_date;

public:
    Professor(const string& department, const string& specialization, const string& hire_date)
        : department(department), specialization(specialization), hire_date(hire_date) {}

    ~Professor() {}

    // Getters
    string getDepartment() const {
         return department;
    }
    string getSpecialization() const { 
         return specialization;
    }
    string getHireDate() const { 
         return hire_date;
    }

    // Setters
    bool setDepartment(const string& dept) {
        if (dept.empty()) {
            return false;
        }
        department=dept;
        return true;
    }

    bool setSpecialization(const string& spec) {
        if (spec.empty()){
            return false;
        }
        specialization=spec;
        return true;
    }
};

class Course {
    string code;
    string title;
    string description;
    double credits;

public:
    Course(const string& code, const string& title, const string& description, double credits)
        : code(code), title(title), description(description), credits(credits) {}

    ~Course() {}

    // Getters
    string getCode() const { 
        return code;
    }
    string getTitle() const { 
        return title;
    }
    string getDescription() const { 
        return description;
    }
    double getCredits() const { 
        return credits;
    }

    // Setters
    bool setTitle(const string& newTitle) {
        if (newTitle.empty()) {
            return false;
        }
        title=newTitle;
        return true;
    }

    bool setCredits(double newCredits) {
        if (newCredits <= 0.0) {
            return false;
        }
        credits=newCredits;
        return true;
    }
};

class Department {
    string name;
    string location;
    long long budget;

public:
    Department(const string& name, const string& location, long long budget)
        : name(name), location(location), budget(budget) {}

    ~Department() {}

    // Getters
    string getName() const { 
        return name;
    }
    string getLocation() const { 
        return location;
    }
    long long getBudget() const { 
        return budget;
    }

    // Setters
    bool setName(const string& newName) {
        if (newName.empty()) {
            return false;
        }
        name=newName;
        return true;
    }
};

class GradeBook {
    string courseCode;
    vector<string> studentIDs;
    vector<double> grades;

public:
    //Constructor
    GradeBook(const string& courseCode,
              const vector<string>& studentIDs,
              const vector<double>& grades)
        : courseCode(courseCode), studentIDs(studentIDs), grades(grades) {}

    ~GradeBook() {}


    //Getters
    vector<string> getStudentIDs() const {
        return studentIDs;
    }

    vector<double> getGrades() const {
        return grades;
    }

    //Setter Validation and setting the grade in the Vector
    bool setGrade(const string& studentID, double grade) {
        if (studentID.empty() || grade<0.0 || grade>4.0) {
            return false;
        }

        for (size_t i=0; i<studentIDs.size();i++) {
            if (studentIDs[i]==studentID){
                grades[i]=grade;
                return true;
            }
        }

        studentIDs.push_back(studentID);
        grades.push_back(grade);
        return true;
    }

    double getGrade(const string& studentID) const{
        for (size_t i=0; i<studentIDs.size(); i++) {
            if (studentIDs[i]==studentID){
                return grades[i];
            }
        }
        return -1.0;
    }

    bool removeStudent(const string& studentID) {
        for (size_t i = 0; i < studentIDs.size(); ++i) {
            if (studentIDs[i] == studentID) {
                studentIDs.erase(studentIDs.begin() + i);
                grades.erase(grades.begin() + i);
                return true;
            }
        }
        return false;
    }

    bool hasStudent(const string& studentID) const{
        for (const string& id : studentIDs) {
            if (id==studentID){
                return true;
            }
        }
        return false;
    }

    //Calculating Average Grade
    double calculateAverageGrade() const{
        if(grades.empty()){
            return 0.0;
        }
        double total=0.0;
        for (double g : grades){
                total+=g;
        }
        return total/grades.size();
    }
    
    //Calculating Highest Grade
    double getHighestGrade() const{
        if (grades.empty()){
                return 0.0;
        }
        double maxGrade=grades[0];
        for (double g : grades) {
            if (g>maxGrade){
                maxGrade=g;
            }
        }
        return maxGrade;
    }
    //method to return a vector of failing students
    vector<string> getFailingStudents() const {
        vector<string> failing;
        for (size_t i=0; i<grades.size(); i++) {
            if (grades[i]<2.0){
                failing.push_back(studentIDs[i]);
            }
        }
        return failing;
    }
};

//Enrollment Management Class

class EnrollmentManager {

    vector<string> courseCodes;
    vector<string> studentIDs;
    vector<vector<bool>> enrollmentTable; //2D Matrix for students x courses

public:
    //Constructor
    EnrollmentManager(const vector<string>& students,
                      const vector<string>& courses)
        : studentIDs(students), courseCodes(courses) 
    {
       //Resizing the enrollment table 
        enrollmentTable.resize(studentIDs.size(),vector<bool>(courseCodes.size(), false));
    }

    ~EnrollmentManager() {}
    
    int findIndex(const vector<string>& vec, const string& target) {
    for (size_t i=0; i<vec.size();i++){
        if (vec[i]==target) {
            return i;
        }
    }
    return -1; // Not found
}


    //Enrolling a student in the course
    bool enrollStudent(const string& studentID, const string& courseCode) {
        int sid = findIndex(studentIDs,studentID);
        int cid = findIndex(courseCodes,courseCode);

        if (sid==-1 || cid==-1){
                return false;
        }
        if (enrollmentTable[sid][cid]) return false; 
        enrollmentTable[sid][cid]=true;
        return true;
    }

    //Dropping a Student from a course
    bool dropStudent(const string& studentID, const string& courseCode) {
        int sid=findIndex(studentIDs,studentID);
        int cid=findIndex(courseCodes,courseCode);

        if (sid==-1 || cid==-1 || !enrollmentTable[sid][cid])return false;
        
        enrollmentTable[sid][cid]=false;
        return true;
    }

    //Checking if the student is already enrolled
    bool isEnrolled(const string& studentID, const string& courseCode) const {
        int sid=findIndex(studentIDs,studentID);
        int cid=findIndex(courseCodes,courseCode);

        return (sid!=-1 && cid!=-1 && enrollmentTable[sid][cid]);
    }

    //Counting the number of Students in a course
    int getEnrollmentCount(const string& courseCode) const {
        int cid=findIndex(courseCodes,courseCode);
        if (cid==-1) {
                return 0;
        }
        int count=0;
        for (size_t i=0; i<studentIDs.size(); i++) {
            if (enrollmentTable[i][cid]) {
                count++;
            }
        }
        return count;
    }

   
};

/*The main function and menu is in the final assignment (This code is only the first set of statements which meets the requirements of first assignment)*/

